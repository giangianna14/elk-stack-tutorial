apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: elastic-system
  labels:
    app: filebeat
data:
  filebeat.yml: |-
    filebeat.autodiscover:
      providers:
        - type: kubernetes
          node: ${NODE_NAME}
          hints.enabled: true
          hints.default_config:
            type: container
            paths:
              - /var/log/containers/*${data.kubernetes.container.id}.log
          templates:
            # Template untuk aplikasi e-commerce
            - condition:
                contains:
                  kubernetes.labels.app: "order-service"
              config:
                type: container
                paths:
                  - /var/log/containers/*${data.kubernetes.container.id}.log
                processors:
                  - decode_json_fields:
                      fields: ["message"]
                      target: ""
                      overwrite_keys: true
                  - add_fields:
                      target: service
                      fields:
                        name: order-service
                        type: ecommerce
                        environment: production
                  - add_fields:
                      target: log
                      fields:
                        source: kubernetes
                        category: application
                multiline.pattern: '^{'
                multiline.negate: true
                multiline.match: after
            
            # Template untuk payment service
            - condition:
                contains:
                  kubernetes.labels.app: "payment-service"
              config:
                type: container
                paths:
                  - /var/log/containers/*${data.kubernetes.container.id}.log
                processors:
                  - decode_json_fields:
                      fields: ["message"]
                      target: ""
                      overwrite_keys: true
                  - add_fields:
                      target: service
                      fields:
                        name: payment-service
                        type: ecommerce
                        environment: production
                        criticality: high
                  - add_fields:
                      target: log
                      fields:
                        source: kubernetes
                        category: financial
                        compliance: pci-dss

    processors:
      # Global processors untuk semua logs
      - add_kubernetes_metadata:
          host: ${NODE_NAME}
          matchers:
          - logs_path:
              logs_path: "/var/log/containers/"
      
      # Enrichment dengan informasi tambahan
      - add_fields:
          target: cluster
          fields:
            name: openshift-prod
            region: us-east-1
            datacenter: aws
      
      # Parsing untuk structured logs
      - decode_json_fields:
          fields: ["message"]
          target: ""
          overwrite_keys: true
          when:
            contains:
              message: "{"
      
      # Menambahkan timestamp parsing
      - timestamp:
          field: "@timestamp"
          layouts:
            - '2006-01-02T15:04:05.000Z'
            - '2006-01-02T15:04:05Z'
          test:
            - '2025-06-28T10:30:00.000Z'

      # Security enhancement - masking sensitive data
      - script:
          lang: javascript
          id: mask_sensitive_data
          source: >
            function process(event) {
              var message = event.Get("message");
              if (message) {
                // Mask credit card numbers
                message = message.replace(/\d{4}-\d{4}-\d{4}-\d{4}/g, "****-****-****-****");
                // Mask email addresses partially
                message = message.replace(/([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g, "$1@***");
                // Mask phone numbers
                message = message.replace(/\+?\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}/g, "***-***-****");
                event.Put("message", message);
              }
            }

    # Output ke Kafka dengan topic routing
    output.kafka:
      hosts: ["kafka-cluster-kafka-bootstrap:9092"]
      topic: 'logs.%{[service.environment]}.%{[log.category]:application}'
      partition.round_robin:
        reachable_only: false
      
      # Batching untuk performance
      max_message_bytes: 1000000
      bulk_max_size: 2048
      timeout: 30s
      
      # Compression
      compression: gzip
      compression_level: 4
      
      # Security configuration
      ssl.enabled: true
      ssl.certificate_authorities: ["/etc/ssl/certs/ca-certificates.crt"]
      
      # Authentication (jika diperlukan)
      # username: "filebeat"
      # password: "${KAFKA_PASSWORD}"
      
      # Client ID untuk monitoring
      client_id: "filebeat-${NODE_NAME}"

    # Logging configuration
    logging.level: info
    logging.to_files: true
    logging.files:
      path: /var/log/filebeat
      name: filebeat
      keepfiles: 7
      permissions: 0644

    # Monitoring
    monitoring.enabled: true
    http.enabled: true
    http.host: 0.0.0.0
    http.port: 5066

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: elastic-system
  labels:
    app: filebeat
spec:
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.14.1
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-credentials
              key: password
              optional: true
        securityContext:
          runAsUser: 0
          # Capabilities needed untuk membaca logs
          capabilities:
            add:
            - SYS_ADMIN
        resources:
          limits:
            memory: 200Mi
            cpu: 100m
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 5066
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 5066
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
rules:
- apiGroups: [""]
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - replicasets
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: elastic-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: elastic-system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
