# Order Service - Sample Microservice

## Deployment Configuration

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: ecommerce-prod
  labels:
    app: order-service
    version: v1.2.3
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        version: v1.2.3
      annotations:
        # Annotations untuk Filebeat discovery
        co.elastic.logs/enabled: "true"
        co.elastic.logs/multiline.pattern: '^{'
        co.elastic.logs/multiline.negate: "true"
        co.elastic.logs/multiline.match: "after"
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.message_key: "message"
    spec:
      containers:
      - name: order-service
        image: ecommerce/order-service:1.2.3
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: metrics
        env:
        - name: SERVICE_NAME
          value: "order-service"
        - name: SERVICE_VERSION
          value: "1.2.3"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: LOG_FORMAT
          value: "json"
        # Database connection
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: order-db-secret
              key: password
        # Kafka configuration
        - name: KAFKA_BROKERS
          value: "kafka-cluster-kafka-bootstrap:9092"
        - name: KAFKA_TOPIC_ORDERS
          value: "orders.events"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        # Volume untuk logs jika diperlukan
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: ecommerce-prod
  labels:
    app: order-service
spec:
  selector:
    app: order-service
  ports:
  - name: http
    port: 80
    targetPort: 8080
  - name: metrics
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
# Service Monitor untuk Prometheus (metrics collection)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: order-service-metrics
  namespace: ecommerce-prod
  labels:
    app: order-service
spec:
  selector:
    matchLabels:
      app: order-service
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
